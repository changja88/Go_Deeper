# Generated by Django 5.0.3 on 2024-04-11 15:12

import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("django", "0001_initial"),
        ("django_meta", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="memberorm",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="memberorm",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddField(
            model_name="addresslevel2orm",
            name="level1",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="level2", to="django.addresslevel1orm"
            ),
        ),
        migrations.AddField(
            model_name="bearertokenorm",
            name="member",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bearer_token",
                to=settings.AUTH_USER_MODEL,
                verbose_name="User",
            ),
        ),
        migrations.AddField(
            model_name="memberfcmorm",
            name="member",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name="MemberLivingAddressORM",
            fields=[
                (
                    "certificationorm_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_meta.certificationorm",
                    ),
                ),
                (
                    "level1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="living_level1_address",
                        to="django.addresslevel1orm",
                    ),
                ),
                (
                    "level2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="living_level2_address",
                        to="django.addresslevel2orm",
                    ),
                ),
                (
                    "member",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="living_address",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "[living_address] 사용자 계정",
                "verbose_name_plural": "[living_address] 사용자 계정",
                "db_table": "member_living_address",
            },
            bases=("django_meta.certificationorm",),
        ),
        migrations.CreateModel(
            name="MemberPlayingAddressORM",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "level1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playing_level1_address",
                        to="django.addresslevel1orm",
                    ),
                ),
                (
                    "level2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playing_level2_address",
                        to="django.addresslevel2orm",
                    ),
                ),
                (
                    "member",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playing_address",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "[playing_address] 사용자 활동 지역",
                "verbose_name_plural": "[playing_address] 사용자 활동 지역",
                "db_table": "member_playing_address",
            },
        ),
        migrations.AddConstraint(
            model_name="memberorm",
            constraint=models.UniqueConstraint(fields=("name", "phone_number"), name="register_unique"),
        ),
        migrations.AddConstraint(
            model_name="memberfcmorm",
            constraint=models.UniqueConstraint(fields=("member", "fcm_token"), name="member_fcm_unique"),
        ),
        migrations.AlterIndexTogether(
            name="memberlivingaddressorm",
            index_together={("level1", "level2")},
        ),
        migrations.AlterIndexTogether(
            name="memberplayingaddressorm",
            index_together={("level1", "level2")},
        ),
    ]
