# Generated by Django 5.0.3 on 2024-04-11 15:12

import applications.common.enum
import application.evaluation_context.domain_layer.evaluation_enum
import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EvaluationSourceORM",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("weight", models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                (
                    "type",
                    models.CharField(
                        choices=[
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "INCOME_SOURCE"
                                ],
                                "소득 수준",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "JOB_SOURCE"
                                ],
                                "직업 수준",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "COMPANY_SOURCE"
                                ],
                                "회사 수준",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "ASSET_SOURCE"
                                ],
                                "자산 수준",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "CAR_PRICE_SOURCE"
                                ],
                                "차량 가격(개인 자산에 포함)",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "FAMILY_ASSET_SOURCE"
                                ],
                                "집안 자산",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "FATHER_JOB_SOURCE"
                                ],
                                "부 직업",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "MOTHER_JOB_SOURCE"
                                ],
                                "모 직업",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "EDUCATION_SOURCE"
                                ],
                                "교육 수준",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "APPEARANCE_SOURCE"
                                ],
                                "외모",
                            ),
                            (
                                application.evaluation_context.domain_layer.evaluation_enum.EvaluationSourceType[
                                    "BIRTH_YEAR_SOURCE"
                                ],
                                "나이",
                            ),
                        ],
                        verbose_name="타입",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            (applications.common.enum.Gender["FEMALE"], "여자일 경우"),
                            (applications.common.enum.Gender["MALE"], "남자일 경우"),
                        ],
                        verbose_name="성별",
                    ),
                ),
            ],
            options={
                "verbose_name": "[evaluation_source] 사용자 평가 기준표",
                "verbose_name_plural": "[evaluation_source]사용자 평가 기준표",
                "db_table": "evaluation_source",
                "unique_together": {("type", "gender")},
            },
        ),
        migrations.CreateModel(
            name="MemberEvaluationORM",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "work_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "income_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "asset_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "background_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "education_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "appearance_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "birth_year_point",
                    models.DecimalField(
                        decimal_places=5,
                        default=0,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        help_text="평가 대상",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evaluation",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "[member_evaluation] 멤버 평가 정보",
                "verbose_name_plural": "[member_evaluation] 멤버 평가 정보",
                "db_table": "member_evaluation",
                "index_together": {
                    (
                        "work_point",
                        "income_point",
                        "asset_point",
                        "background_point",
                        "education_point",
                        "appearance_point",
                        "birth_year_point",
                    )
                },
            },
        ),
    ]
